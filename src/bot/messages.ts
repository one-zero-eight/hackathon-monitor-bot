import type { Action, Alert, View } from "@/api"
import escapeHtml from "@/utils/escapeHtml"

export const messages = {
  accessDenied: "üôà",

  start: `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/actions - —Å—Ü–µ–Ω–∞—Ä–∏–∏
/views - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
/graphs - –≥—Ä–∞—Ñ–∏–∫–∏`,

  alert: (alert: Alert): string => {
    const lines = []

    if (alert.status === "resolved") {
      lines.push(`–ü—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞: <b>${escapeHtml(alert.title)}</b> ‚úÖ`)
    } else {
      const emoji = alert.severity === "warning"
        ? "‚ö†Ô∏è"
        : "üö®"
      lines.push(`${emoji} <b>${escapeHtml(alert.title)}</b> ${emoji}`)
    }

    lines.push("")
    lines.push(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: <u>${escapeHtml(alert.target_alias)}</u>`)
    lines.push(`–í—Ä–µ–º—è: ${alert.timestamp.toISOString()}`)

    if (alert.description) {
      lines.push("")
      lines.push(`‚ÑπÔ∏è <i>${escapeHtml(alert.description)}</i>`)
    }

    return lines.join("\n")
  },

  actionsList: "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:",
  viewsList: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:",

  runAction: "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π",
  suggestedActions: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:",
  actionRunning: "–°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è... ‚è≥",
  actionSuccess: "–°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ",
  actionError: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è ‚ùå",

  noTargetDbs: "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",

  chooseTargetDbForAction: (action: Action) => {
    let message = `–°—Ü–µ–Ω–∞—Ä–∏–π "<b>${escapeHtml(action.title)}</b>"`

    if (action.description) {
      message += `\n\n‚ÑπÔ∏è <i>${escapeHtml(action.description)}</i>`
    }

    message += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:"

    return message
  },

  runActionConfirm: (action: Action, targetDbId: string) => {
    return `–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π "<b>${escapeHtml(action.title)}</b>" –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö <u>${escapeHtml(targetDbId)}</u>?`
  },

  chooseTargetDbForView: (view: View) => {
    let message = `–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ "<b>${escapeHtml(view.title)}</b>"`

    if (view.description) {
      message += `\n\n‚ÑπÔ∏è <i>${escapeHtml(view.description)}</i>`
    }

    message += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:"

    return message
  },
}
